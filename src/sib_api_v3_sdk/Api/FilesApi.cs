/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Api
{
    using System.Net.Http;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>FileList</returns>
        FileList CrmFilesGet (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null);

        /// <summary>
        /// Get all files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>ApiResponse of FileList</returns>
        ApiResponse<FileList> CrmFilesGetWithHttpInfo (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null);
        /// <summary>
        /// Get file details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>FileData</returns>
        FileData CrmFilesIdDataGet (string id);

        /// <summary>
        /// Get file details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>ApiResponse of FileData</returns>
        ApiResponse<FileData> CrmFilesIdDataGetWithHttpInfo (string id);
        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns></returns>
        void CrmFilesIdDelete (string id);

        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CrmFilesIdDeleteWithHttpInfo (string id);
        /// <summary>
        /// Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>FileDownloadableLink</returns>
        FileDownloadableLink CrmFilesIdGet (string id);

        /// <summary>
        /// Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>ApiResponse of FileDownloadableLink</returns>
        ApiResponse<FileDownloadableLink> CrmFilesIdGetWithHttpInfo (string id);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>FileData</returns>
        FileData CrmFilesPost (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>ApiResponse of FileData</returns>
        ApiResponse<FileData> CrmFilesPostWithHttpInfo (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of FileList</returns>
        System.Threading.Tasks.Task<FileList> CrmFilesGetAsync (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null);

        /// <summary>
        /// Get all files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of ApiResponse (FileList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileList>> CrmFilesGetAsyncWithHttpInfo (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null);
        /// <summary>
        /// Get file details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of FileData</returns>
        System.Threading.Tasks.Task<FileData> CrmFilesIdDataGetAsync (string id);

        /// <summary>
        /// Get file details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesIdDataGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CrmFilesIdDeleteAsync (string id);

        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CrmFilesIdDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of FileDownloadableLink</returns>
        System.Threading.Tasks.Task<FileDownloadableLink> CrmFilesIdGetAsync (string id);

        /// <summary>
        /// Download a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of ApiResponse (FileDownloadableLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileDownloadableLink>> CrmFilesIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of FileData</returns>
        System.Threading.Tasks.Task<FileData> CrmFilesPostAsync (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesPostAsyncWithHttpInfo (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private sib_api_v3_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new sib_api_v3_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(sib_api_v3_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sib_api_v3_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseAddress.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sib_api_v3_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sib_api_v3_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>FileList</returns>
        public FileList CrmFilesGet (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {
             var localVarResponse = CrmFilesGetWithHttpInfo(entity, entityIds, dateFrom, dateTo, offset, limit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>ApiResponse of FileList</returns>
        public ApiResponse<FileList> CrmFilesGetWithHttpInfo (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {

            var localVarPath = "./crm/files";
            var localVarQueryParams = new Dictionary<string, string>();

            if (entity != null) localVarQueryParams["entity"] = entity;
            if (entityIds != null) localVarQueryParams["entityIds"] = entityIds;
            if (dateFrom != null) localVarQueryParams["dateFrom"] = dateFrom.ToString();
            if (dateTo != null) localVarQueryParams["dateTo"] = dateTo.ToString();
            if (offset != null) localVarQueryParams["offset"] = offset.ToString();
            if (limit != null) localVarQueryParams["limit"] = limit.ToString();
            if (sort != null) localVarQueryParams["sort"] = sort;

            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json", localVarQueryParams);
            var response = this.Configuration.ApiClient.RestClient.SendAsync(request).Result;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesGet", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int)response.StatusCode;
            return new ApiResponse<FileList>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileList) this.Configuration.ApiClient.Deserialize(response, typeof(FileList)));
        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of FileList</returns>
        public async System.Threading.Tasks.Task<FileList> CrmFilesGetAsync (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {
             var localVarResponse = await CrmFilesGetAsyncWithHttpInfo(entity, entityIds, dateFrom, dateTo, offset, limit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all files 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entity">Filter by file entity type (optional)</param>
        /// <param name="entityIds">Filter by file entity IDs (optional)</param>
        /// <param name="dateFrom">dateFrom to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="dateTo">dateTo to date range filter type (timestamp in milliseconds) (optional)</param>
        /// <param name="offset">Index of the first document of the page (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="sort">Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)</param>
        /// <returns>Task of ApiResponse (FileList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileList>> CrmFilesGetAsyncWithHttpInfo (string entity = null, string entityIds = null, int? dateFrom = null, int? dateTo = null, long? offset = null, long? limit = null, string sort = null)
        {

            var localVarPath = "./crm/files";
            var localVarQueryParams = new Dictionary<string, string>();

            if (entity != null) localVarQueryParams["entity"] = entity;
            if (entityIds != null) localVarQueryParams["entityIds"] = entityIds;
            if (dateFrom != null) localVarQueryParams["dateFrom"] = dateFrom.ToString();
            if (dateTo != null) localVarQueryParams["dateTo"] = dateTo.ToString();
            if (offset != null) localVarQueryParams["offset"] = offset.ToString();
            if (limit != null) localVarQueryParams["limit"] = limit.ToString();
            if (sort != null) localVarQueryParams["sort"] = sort;

            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json", localVarQueryParams);
            var response = await this.Configuration.ApiClient.RestClient.SendAsync(request);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesGet", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) response.StatusCode;
            return new ApiResponse<FileList>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileList) this.Configuration.ApiClient.Deserialize(response, typeof(FileList)));
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>FileData</returns>
        public FileData CrmFilesIdDataGet (string id)
        {
             var localVarResponse = CrmFilesIdDataGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>ApiResponse of FileData</returns>
        public ApiResponse< FileData > CrmFilesIdDataGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDataGet");

            var localVarPath = $"./crm/files/{id}/data";
            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json");
            var response = this.Configuration.ApiClient.RestClient.SendAsync(request).Result;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdDataGet", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) response.StatusCode;
            return new ApiResponse<FileData>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(response, typeof(FileData)));
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of FileData</returns>
        public async System.Threading.Tasks.Task<FileData> CrmFilesIdDataGetAsync (string id)
        {
             var localVarResponse = await CrmFilesIdDataGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file details 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to get file data.</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesIdDataGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDataGet");

            var localVarPath = $"./crm/files/{id}/data";
            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json");
            var response = await this.Configuration.ApiClient.RestClient.SendAsync(request);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdDataGet", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) response.StatusCode;
            return new ApiResponse<FileData>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(response, typeof(FileData)));
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns></returns>
        public void CrmFilesIdDelete (string id)
        {
             CrmFilesIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CrmFilesIdDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDelete");

            var localVarPath = $"./crm/files/{id}";
            var request = this.Configuration.ApiClient.PrepareJsonDeleteRequest(localVarPath, "application/json");
            var response = this.Configuration.ApiClient.RestClient.SendAsync(request).Result;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdDelete", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) response.StatusCode;
            return new ApiResponse<Object>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CrmFilesIdDeleteAsync (string id)
        {
             await CrmFilesIdDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CrmFilesIdDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdDelete");

            var localVarPath = $"./crm/files/{id}";
            var request = this.Configuration.ApiClient.PrepareJsonDeleteRequest(localVarPath, "application/json");
            var response = await this.Configuration.ApiClient.RestClient.SendAsync(request);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdDelete", response);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) response.StatusCode;
            return new ApiResponse<Object>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>FileDownloadableLink</returns>
        public FileDownloadableLink CrmFilesIdGet (string id)
        {
             var localVarResponse = CrmFilesIdGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>ApiResponse of FileDownloadableLink</returns>
        public ApiResponse< FileDownloadableLink > CrmFilesIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdGet");

            var localVarPath = $"./crm/files/{id}";
            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json");
            var response = this.Configuration.ApiClient.RestClient.SendAsync(request).Result;

            var localVarStatusCode = (int) response.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdGet", response);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadableLink>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileDownloadableLink) this.Configuration.ApiClient.Deserialize(response, typeof(FileDownloadableLink)));
        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of FileDownloadableLink</returns>
        public async System.Threading.Tasks.Task<FileDownloadableLink> CrmFilesIdGetAsync (string id)
        {
             var localVarResponse = await CrmFilesIdGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">File id to download.</param>
        /// <returns>Task of ApiResponse (FileDownloadableLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileDownloadableLink>> CrmFilesIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FilesApi->CrmFilesIdGet");

            var localVarPath = $"./crm/files/{id}";
            var request = this.Configuration.ApiClient.PrepareJsonGetRequest(localVarPath, "application/json");
            var response = await this.Configuration.ApiClient.RestClient.SendAsync(request);

            var localVarStatusCode = (int) response.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesIdGet", response);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileDownloadableLink>(localVarStatusCode,
                response.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileDownloadableLink) this.Configuration.ApiClient.Deserialize(response, typeof(FileDownloadableLink)));
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>FileData</returns>
        public FileData CrmFilesPost (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
             var localVarResponse = CrmFilesPostWithHttpInfo(file, dealId, contactId, companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>ApiResponse of FileData</returns>
        public ApiResponse< FileData > CrmFilesPostWithHttpInfo (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CrmFilesPost");

            var localVarPath = "./crm/files";
            var localVarFormParams = new Dictionary<string, string>();

            if (dealId != null) localVarFormParams.Add("dealId", this.Configuration.ApiClient.ParameterToString(dealId)); // form parameter
            if (contactId != null) localVarFormParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // form parameter
            if (companyId != null) localVarFormParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // form parameter

            var request = this.Configuration.ApiClient.PrepareMultipartFormsRequest(
                localVarPath,
                "application/json",
                file,
                localVarFormParams);
            var localVarResponse = this.Configuration.ApiClient.RestClient.SendAsync(request).Result;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of FileData</returns>
        public async System.Threading.Tasks.Task<FileData> CrmFilesPostAsync (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
             var localVarResponse = await CrmFilesPostAsyncWithHttpInfo(file, dealId, contactId, companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File data to create a file.</param>
        /// <param name="dealId">Deal id linked to a file (optional)</param>
        /// <param name="contactId">Contact id linked to a file (optional)</param>
        /// <param name="companyId">Company id linked to a file (optional)</param>
        /// <returns>Task of ApiResponse (FileData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileData>> CrmFilesPostAsyncWithHttpInfo (System.IO.Stream file, string dealId = null, long? contactId = null, string companyId = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CrmFilesPost");

            var localVarPath = "./crm/files";
            var localVarFormParams = new Dictionary<string, string>();

            if (dealId != null) localVarFormParams.Add("dealId", this.Configuration.ApiClient.ParameterToString(dealId)); // form parameter
            if (contactId != null) localVarFormParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // form parameter
            if (companyId != null) localVarFormParams.Add("companyId", this.Configuration.ApiClient.ParameterToString(companyId)); // form parameter

            // make the HTTP request
            var request = this.Configuration.ApiClient.PrepareMultipartFormsRequest(
                localVarPath,
                "application/json",
                file,
                localVarFormParams);
            var localVarResponse = await this.Configuration.ApiClient.RestClient.SendAsync(request);

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CrmFilesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            var localVarStatusCode = (int) localVarResponse.StatusCode;
            return new ApiResponse<FileData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (FileData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileData)));
        }

    }
}
